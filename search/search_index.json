{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the jsPsych tutorial! Welcome to this unofficial jsPsych tutorial. This tutorial is intended as a primer to the JavaScript library. The goal is to lay the foundation for how jsPsych works, which you can then build on to create more efficient (and interesting!) experiments. The official jsPsych documentation page does a great job of providing a comprehensive introduction and that should be your first stop for all things jsPsych; however, here we will attempt to condense some of that information and build on the basics to do things not mentioned in the official tutorial. Aims This tutorial is intended for absolute beginners . Here, we will cover some basics, such as: Downloading the full jsPsych plugin package from Github Implementing the jsPsych plugin package into the experiment script Coding various types of experiments using some jsPsych plugins Implementing jsPsych with your prefered experiment hosting site Notes If you don't already have a text editor installed on your machine, please get one now. We will be working with code so it's important that we have software that supports syntax highlighting. Sublime Text, Atom, and VS Code are great options. A basic understanding of Javascript and Markdown is needed to use jsPsych. Though every effort has been made to explain code found in this tutorial, you may find it useful to consult other resources first. For a refresher/crash course on Javascript, please check out the Resources tab. After reviewing the basics, you may wish to check out Advanced topics , which includes information about using custom functions to accomplish various things! Throughout the course of this tutorial, we will also discuss what kinds of experiments jsPsych is not for (to save you the time) and, if applicable, some alternatives. As you become more comfortable using jsPsych, you may wish to explore jsPsych's full set of features in more depth. In that case, please visit the official jsPsych documentation page. Where to go for help Help specific to jsPsych The official jsPsych discussion board on Github is a great place to seek help if you're ever stuck. It's very active and someone is sure to respond within 24-48 hours. Be sure to check the board regularly as new developments are happening all the time. Help with jsPsych & Pavlovia The PsychoPy Discourse forum is a great place to troubleshoot any issues you may have using jsPsych with Pavlovia.","title":"Home"},{"location":"#welcome-to-the-jspsych-tutorial","text":"Welcome to this unofficial jsPsych tutorial. This tutorial is intended as a primer to the JavaScript library. The goal is to lay the foundation for how jsPsych works, which you can then build on to create more efficient (and interesting!) experiments. The official jsPsych documentation page does a great job of providing a comprehensive introduction and that should be your first stop for all things jsPsych; however, here we will attempt to condense some of that information and build on the basics to do things not mentioned in the official tutorial.","title":"Welcome to the jsPsych tutorial!"},{"location":"#aims","text":"This tutorial is intended for absolute beginners . Here, we will cover some basics, such as: Downloading the full jsPsych plugin package from Github Implementing the jsPsych plugin package into the experiment script Coding various types of experiments using some jsPsych plugins Implementing jsPsych with your prefered experiment hosting site","title":"Aims"},{"location":"#notes","text":"If you don't already have a text editor installed on your machine, please get one now. We will be working with code so it's important that we have software that supports syntax highlighting. Sublime Text, Atom, and VS Code are great options. A basic understanding of Javascript and Markdown is needed to use jsPsych. Though every effort has been made to explain code found in this tutorial, you may find it useful to consult other resources first. For a refresher/crash course on Javascript, please check out the Resources tab. After reviewing the basics, you may wish to check out Advanced topics , which includes information about using custom functions to accomplish various things! Throughout the course of this tutorial, we will also discuss what kinds of experiments jsPsych is not for (to save you the time) and, if applicable, some alternatives. As you become more comfortable using jsPsych, you may wish to explore jsPsych's full set of features in more depth. In that case, please visit the official jsPsych documentation page.","title":"Notes"},{"location":"#where-to-go-for-help","text":"","title":"Where to go for help"},{"location":"#help-specific-to-jspsych","text":"The official jsPsych discussion board on Github is a great place to seek help if you're ever stuck. It's very active and someone is sure to respond within 24-48 hours. Be sure to check the board regularly as new developments are happening all the time.","title":"Help specific to jsPsych"},{"location":"#help-with-jspsych-pavlovia","text":"The PsychoPy Discourse forum is a great place to troubleshoot any issues you may have using jsPsych with Pavlovia.","title":"Help with jsPsych &amp; Pavlovia"},{"location":"advancedtopics/","text":"Password protecting an experiment There are instances in which you may want to strictly control who is able to complete your experiment. This becomes especially important with publicly accessible experiments. When using Pavlovia as a hosting service, this is controlled for when you create your project repo. If you have created a private project repo on Gitlab, your experient is private , which means only those who have a direct link will be able to complete your experiment. However, there are times when you may want to make your experiment public but only allow those coming from the right source (where a password is provided, for instance) to be able to actually complete the experiment. Let's write a function to password protect our experiment now: var password_func = function passWord() { var testV = 1; var pass1 = prompt('Please Enter Your Password',' '); while (testV < 100) { if (!pass1) history.go(-1); if (pass1.toLowerCase() == \"Iloveicecream\") { //set password here. Recommend using encryption software alert('You Got it Right!'); window.open('full experiment file here'); //redirects the participant to the experiment file if login correct. Change file accordingly break; } testV+=1; var pass1 = prompt('Access Denied - Password Incorrect, Please Try Again.','Password'); } if (pass1.toLowerCase()!=\"password\" & testV ==100) //testV value can be changed to lock people out after n number of attempts history.go(-1); return \" \"; } We have a few options for integrating with jsPsych. If we want the experiment script to remain untouched (recommended), we can simply create a new script that only contains this function and redirects participants to the experiment script if they have entered the right password. We can use the jsPsych-call-function.js plugin to accomplish this, as it allows for arbitrary functions in its parameters. Redirect function The redirect function explained in detail in the Hosting/Crediting tab. function() { let display_element = jsPsych.getDisplayElement(); display_element.innerHTML = \"<p>You have completed the experiment.</p>\"+ \"<p>Thank you for participating!</p>\"+ \"<p>Please wait to be redirected back to Prolific.</p>\" setTimeout( function() { window.location.assign(\"URL and/or completion code goes here\") }, 5000) }","title":"Advanced topics"},{"location":"advancedtopics/#password-protecting-an-experiment","text":"There are instances in which you may want to strictly control who is able to complete your experiment. This becomes especially important with publicly accessible experiments. When using Pavlovia as a hosting service, this is controlled for when you create your project repo. If you have created a private project repo on Gitlab, your experient is private , which means only those who have a direct link will be able to complete your experiment. However, there are times when you may want to make your experiment public but only allow those coming from the right source (where a password is provided, for instance) to be able to actually complete the experiment. Let's write a function to password protect our experiment now: var password_func = function passWord() { var testV = 1; var pass1 = prompt('Please Enter Your Password',' '); while (testV < 100) { if (!pass1) history.go(-1); if (pass1.toLowerCase() == \"Iloveicecream\") { //set password here. Recommend using encryption software alert('You Got it Right!'); window.open('full experiment file here'); //redirects the participant to the experiment file if login correct. Change file accordingly break; } testV+=1; var pass1 = prompt('Access Denied - Password Incorrect, Please Try Again.','Password'); } if (pass1.toLowerCase()!=\"password\" & testV ==100) //testV value can be changed to lock people out after n number of attempts history.go(-1); return \" \"; } We have a few options for integrating with jsPsych. If we want the experiment script to remain untouched (recommended), we can simply create a new script that only contains this function and redirects participants to the experiment script if they have entered the right password. We can use the jsPsych-call-function.js plugin to accomplish this, as it allows for arbitrary functions in its parameters.","title":"Password protecting an experiment"},{"location":"advancedtopics/#redirect-function","text":"The redirect function explained in detail in the Hosting/Crediting tab. function() { let display_element = jsPsych.getDisplayElement(); display_element.innerHTML = \"<p>You have completed the experiment.</p>\"+ \"<p>Thank you for participating!</p>\"+ \"<p>Please wait to be redirected back to Prolific.</p>\" setTimeout( function() { window.location.assign(\"URL and/or completion code goes here\") }, 5000) }","title":"Redirect function"},{"location":"hosting/","text":"Hosting on Pavlovia Most of the time, we will want to host our experiment files on a hosting website like Pavlovia. Our participant data files will also be housed on their servers so we need to make sure we integrate jsPsych with Pavlovia successfully so that our experiment works as intended. Luckily, a lot of the code-y bits that are needed to make jsPsych work seemlessly with Pavlovia have already been created for us. We just need to alter our experiment script to take advantage of a custom plugin made by the team at Pavlovia for jsPsych. Our <head> section will look a little different than how it looks when we run experiments locally. Pavlovia offers some documentation on the kinds of changes we'll need to make. Let's do that now: <head> <script type=\"text/javascript\" src=\"lib/vendors/jspsych-6.0.0/jspsych.js\"></script> <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/vendors/jspsych-6.0.0/css/jspsych.css\"/> <script src=\"lib/vendors/jspsych-6.0.0/plugins/jspsych-same-different-html.js\"></script> <script type=\"text/javascript\" src=\"lib/vendors/jquery-2.2.0.min.js\"></script> <script type=\"text/javascript\" src=\"lib/jspsych-pavlovia-3.0.6.js\"></script> </head> Pavlovia hosts the full jsPsych library and its custom plugin on its servers so we don't need to push our own library to Gitlab when we're ready to run it on Pavlovia. Besides the changes in the <head> section, we will also need to initialize Pavlovia once at the very beginning of the experiment and once more, at the end of the experiment script. If we don't do this, data will not be saved on Pavlovia's servers. Here is what our experiment script will have to look like: <head> <script type=\"text/javascript\" src=\"lib/vendors/jspsych-6.0.0/jspsych.js\"></script> <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/vendors/jspsych-6.0.0/css/jspsych.css\"/> <script src=\"lib/vendors/jspsych-6.0.0/plugins/jspsych-same-different-html.js\"></script> <script type=\"text/javascript\" src=\"lib/vendors/jquery-2.2.0.min.js\"></script> <script type=\"text/javascript\" src=\"lib/jspsych-pavlovia-3.0.6.js\"></script> </head> <body> <script> // more on this variable below let timeline = []; // init connection with Pavlovia var pavlovia_init = { type: \"pavlovia\", command: \"init\" }; timeline.push(pavlovia_init); // EXPERIMENT VARIABLES GO HERE // finish connection with Pavlovia at the end of script, before the initialization object var pavlovia_finish = { type: \"pavlovia\", command: \"finish\" }; timeline.push(pavlovia_finish); jsPsych.init({ timeline: timeline }) </script> </body> Recommendation Don't include the Pavlovia-specific head section while creating your experiment on your machine. Save this for the last step, before pushing to Gitlab. You will want to test run your experiment locally and it will not work if you're attempting to source your library from Pavlovia. Crediting participants Prolific & URPP After our participants have completed the experiment, URPP and Prolific both offer completion URLS that we can use to credit participants. We want to place the completion URL in the on_finish: parameter, which exclusively uses functions. If enabled, we may also want to catch some participant-specific information embedded in the experiment URL itself to use for crediting. jsPsych comes with a built-in function to do this. Let's explore how to implement this function with our custom redirect function: <body> <script> var timeline = []; // EXPERIMENT VARIABLES GO HERE ... jsPsych.init({ timeline: timeline, on_finish: function() { let display_element = jsPsych.getDisplayElement(); // let's also give participants a brief message before we redirect them. This will help with formatting that on a webpage display_element.innerHTML = \"<p>You have completed the experiment.</p>\" + \"<p>Thank you for participating!</p>\" + \"<p>Please wait to be redirected back to URPP.</p>\" let ppn = jsPsych.data.urlVariables()['participant'] // this parses the URL and looks for the word 'participant' setTimeout( function() { window.location.assign(\"https://yorku.sona-systems.com/webstudy_credit.aspx?experiment_id=3909&credit_token=87648300f55a4c4c969da7a52e379965&survey_code=\"+ppn) }, 5000) // redirect to specified URL after a delay of 5 seconds // here we are redirecting back to URPP and using the value obtained by our previously-defined variable ppn to credit each unique participant. } }) For sites that provide you with a completion URL (like Prolific) that doesn't require a unique participant identifier, you can simplify the above function to simply display a message and redirect back to the site using the unique completion URL, all without parsing the experiment URL: <body> <script> var timeline = []; // EXPERIMENT VARIABLES GO HERE ... jsPsych.init({ timeline: timeline, on_finish: function() { let display_element = jsPsych.getDisplayElement(); display_element.innerHTML = \"<p>You have completed the experiment.</p>\"+ \"<p>Thank you for participating!</p>\"+ \"<p>Please wait to be redirected back to Prolific.</p>\" setTimeout( function() { window.location.assign(\"unique prolific completion URL\") }, 5000) // redirect after a delay of 5 seconds } }) </script> </body> Recommendation Set the delay for around 8000ms when using Pavlovia as a hosting service. Communication with Pavlovia's servers isn't always immediate and it may take a few seconds to transfer data! Participant data files will fail to save if you redirect too soon. I've found a buffer of 8000ms to work best. mTurk participants If we are recruiting participants from mTurk, we will have to give them a completion code at the end which they can use to get credit on mTurk. Luckily, jsPsych once again has a built-in module called 'jsPsych.turk' for interacting with mTurk. We will want to display a little message at the end of the experiment that displays the participant's code. We will do in the same way we displayed our message in the redirect function. Let's alter our on_finish: parameter now to be mTurk-compatible: <body> <script> var timeline = []; // EXPERIMENT VARIABLES GO HERE ... jsPsych.init({ timeline: timeline, on_finish: function() { const turk_info = jsPsych.turk.turkInfo(); // this returns an object with 6 properties that we can save in participant CSV files const c_code = completion_code('ABCD', 'EFGH') // we can make these strings any combo of letters we want // lets save those 6 properties we got earlier to each CSV file jsPsych.data.addProperties( { workerId: turk_info.workerId, assignmentId: turk_info.assignmentId, hitId: turk_info.hitId, turk_code: set_c } ); end_display(set_c) } }) </script> </body> Hosting on Cognition.run Cognition.run is a brand new (launched in 2020) jsPsych-only hosting service. As more features become available, I will update this site to reflect those changes. For now, we will discuss what's available and how it differs with Pavlovia so that you can make the best decision about which hosting site to use. Much like Pavlovia, Cognition.run houses an up-to-date jsPsych library on its servers. It also allows you to upload additional JS or CSS scripts that your experiment may use. As of the time of writing, there is no support for uploading edited or custom plugins , though these changes are coming (another great reason to check the jsPsych discussion forum regularly). Unlike Pavlovia, Cognition.run doesn't require you to \"push\" anything to a repository. You can either copy and paste your existing experiment code directly into the online code editor (and preview a live version of your experiment), or you can make a new experiment directly on the site. As a result, you don't have an HTML experiment file so there is no need to know much about HTML tags ( <head> , <script> , etc.). You can simply start defining your experiment variables right away. This also means that some of the constraints of having the experiment encased in markdown language are gone -- you're free to use external scripts within experiment variables if you want to. Besides these minor changes in the way you write your experiment script, the fundamental structure of each jsPsych experiment remains largely unchanged. You are still using jsPsych in the way defined in this tutorial, with some added flexbility and ease that Cognition.run provides. All of our crediting and redirect functions can still be used as outlined above. Changing webpage elements in Cognition.run will have to be done by uploading your own CSS file that defines the style elements of the page.","title":"Hosting/Crediting"},{"location":"hosting/#hosting-on-pavlovia","text":"Most of the time, we will want to host our experiment files on a hosting website like Pavlovia. Our participant data files will also be housed on their servers so we need to make sure we integrate jsPsych with Pavlovia successfully so that our experiment works as intended. Luckily, a lot of the code-y bits that are needed to make jsPsych work seemlessly with Pavlovia have already been created for us. We just need to alter our experiment script to take advantage of a custom plugin made by the team at Pavlovia for jsPsych. Our <head> section will look a little different than how it looks when we run experiments locally. Pavlovia offers some documentation on the kinds of changes we'll need to make. Let's do that now: <head> <script type=\"text/javascript\" src=\"lib/vendors/jspsych-6.0.0/jspsych.js\"></script> <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/vendors/jspsych-6.0.0/css/jspsych.css\"/> <script src=\"lib/vendors/jspsych-6.0.0/plugins/jspsych-same-different-html.js\"></script> <script type=\"text/javascript\" src=\"lib/vendors/jquery-2.2.0.min.js\"></script> <script type=\"text/javascript\" src=\"lib/jspsych-pavlovia-3.0.6.js\"></script> </head> Pavlovia hosts the full jsPsych library and its custom plugin on its servers so we don't need to push our own library to Gitlab when we're ready to run it on Pavlovia. Besides the changes in the <head> section, we will also need to initialize Pavlovia once at the very beginning of the experiment and once more, at the end of the experiment script. If we don't do this, data will not be saved on Pavlovia's servers. Here is what our experiment script will have to look like: <head> <script type=\"text/javascript\" src=\"lib/vendors/jspsych-6.0.0/jspsych.js\"></script> <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/vendors/jspsych-6.0.0/css/jspsych.css\"/> <script src=\"lib/vendors/jspsych-6.0.0/plugins/jspsych-same-different-html.js\"></script> <script type=\"text/javascript\" src=\"lib/vendors/jquery-2.2.0.min.js\"></script> <script type=\"text/javascript\" src=\"lib/jspsych-pavlovia-3.0.6.js\"></script> </head> <body> <script> // more on this variable below let timeline = []; // init connection with Pavlovia var pavlovia_init = { type: \"pavlovia\", command: \"init\" }; timeline.push(pavlovia_init); // EXPERIMENT VARIABLES GO HERE // finish connection with Pavlovia at the end of script, before the initialization object var pavlovia_finish = { type: \"pavlovia\", command: \"finish\" }; timeline.push(pavlovia_finish); jsPsych.init({ timeline: timeline }) </script> </body> Recommendation Don't include the Pavlovia-specific head section while creating your experiment on your machine. Save this for the last step, before pushing to Gitlab. You will want to test run your experiment locally and it will not work if you're attempting to source your library from Pavlovia.","title":"Hosting on Pavlovia"},{"location":"hosting/#crediting-participants","text":"","title":"Crediting participants"},{"location":"hosting/#prolific-urpp","text":"After our participants have completed the experiment, URPP and Prolific both offer completion URLS that we can use to credit participants. We want to place the completion URL in the on_finish: parameter, which exclusively uses functions. If enabled, we may also want to catch some participant-specific information embedded in the experiment URL itself to use for crediting. jsPsych comes with a built-in function to do this. Let's explore how to implement this function with our custom redirect function: <body> <script> var timeline = []; // EXPERIMENT VARIABLES GO HERE ... jsPsych.init({ timeline: timeline, on_finish: function() { let display_element = jsPsych.getDisplayElement(); // let's also give participants a brief message before we redirect them. This will help with formatting that on a webpage display_element.innerHTML = \"<p>You have completed the experiment.</p>\" + \"<p>Thank you for participating!</p>\" + \"<p>Please wait to be redirected back to URPP.</p>\" let ppn = jsPsych.data.urlVariables()['participant'] // this parses the URL and looks for the word 'participant' setTimeout( function() { window.location.assign(\"https://yorku.sona-systems.com/webstudy_credit.aspx?experiment_id=3909&credit_token=87648300f55a4c4c969da7a52e379965&survey_code=\"+ppn) }, 5000) // redirect to specified URL after a delay of 5 seconds // here we are redirecting back to URPP and using the value obtained by our previously-defined variable ppn to credit each unique participant. } }) For sites that provide you with a completion URL (like Prolific) that doesn't require a unique participant identifier, you can simplify the above function to simply display a message and redirect back to the site using the unique completion URL, all without parsing the experiment URL: <body> <script> var timeline = []; // EXPERIMENT VARIABLES GO HERE ... jsPsych.init({ timeline: timeline, on_finish: function() { let display_element = jsPsych.getDisplayElement(); display_element.innerHTML = \"<p>You have completed the experiment.</p>\"+ \"<p>Thank you for participating!</p>\"+ \"<p>Please wait to be redirected back to Prolific.</p>\" setTimeout( function() { window.location.assign(\"unique prolific completion URL\") }, 5000) // redirect after a delay of 5 seconds } }) </script> </body> Recommendation Set the delay for around 8000ms when using Pavlovia as a hosting service. Communication with Pavlovia's servers isn't always immediate and it may take a few seconds to transfer data! Participant data files will fail to save if you redirect too soon. I've found a buffer of 8000ms to work best.","title":"Prolific &amp; URPP"},{"location":"hosting/#mturk-participants","text":"If we are recruiting participants from mTurk, we will have to give them a completion code at the end which they can use to get credit on mTurk. Luckily, jsPsych once again has a built-in module called 'jsPsych.turk' for interacting with mTurk. We will want to display a little message at the end of the experiment that displays the participant's code. We will do in the same way we displayed our message in the redirect function. Let's alter our on_finish: parameter now to be mTurk-compatible: <body> <script> var timeline = []; // EXPERIMENT VARIABLES GO HERE ... jsPsych.init({ timeline: timeline, on_finish: function() { const turk_info = jsPsych.turk.turkInfo(); // this returns an object with 6 properties that we can save in participant CSV files const c_code = completion_code('ABCD', 'EFGH') // we can make these strings any combo of letters we want // lets save those 6 properties we got earlier to each CSV file jsPsych.data.addProperties( { workerId: turk_info.workerId, assignmentId: turk_info.assignmentId, hitId: turk_info.hitId, turk_code: set_c } ); end_display(set_c) } }) </script> </body>","title":"mTurk participants"},{"location":"hosting/#hosting-on-cognitionrun","text":"Cognition.run is a brand new (launched in 2020) jsPsych-only hosting service. As more features become available, I will update this site to reflect those changes. For now, we will discuss what's available and how it differs with Pavlovia so that you can make the best decision about which hosting site to use. Much like Pavlovia, Cognition.run houses an up-to-date jsPsych library on its servers. It also allows you to upload additional JS or CSS scripts that your experiment may use. As of the time of writing, there is no support for uploading edited or custom plugins , though these changes are coming (another great reason to check the jsPsych discussion forum regularly). Unlike Pavlovia, Cognition.run doesn't require you to \"push\" anything to a repository. You can either copy and paste your existing experiment code directly into the online code editor (and preview a live version of your experiment), or you can make a new experiment directly on the site. As a result, you don't have an HTML experiment file so there is no need to know much about HTML tags ( <head> , <script> , etc.). You can simply start defining your experiment variables right away. This also means that some of the constraints of having the experiment encased in markdown language are gone -- you're free to use external scripts within experiment variables if you want to. Besides these minor changes in the way you write your experiment script, the fundamental structure of each jsPsych experiment remains largely unchanged. You are still using jsPsych in the way defined in this tutorial, with some added flexbility and ease that Cognition.run provides. All of our crediting and redirect functions can still be used as outlined above. Changing webpage elements in Cognition.run will have to be done by uploading your own CSS file that defines the style elements of the page.","title":"Hosting on Cognition.run"},{"location":"partone/","text":"Downloading jsPsych To download jsPsych, please click here . Please select the latest release to ensure you have access to the newest plugins. Implementing jsPsych We can use jsPsych in two ways: either locally (i.e. on your own machine) or using a hosting website, such as Pavlovia or the new jsPsych-only Cognition.run. Whether we run jsPsych locally or host the experiment scripts somewhere, we will have to make changes to our script to ensure it all works. Running locally To run jsPsych locally, we need to place the plugin library in our project directory, where our experiment script will also be housed. Make a project directory called my-project on the desktop now. After you've made the folder, grab and drop the jsPsych plugin libary into the folder. Now we're ready to make our experiment script. Using your favourite text editor, create an empty .html file. Because we're going to be making a same-different task, let's call it same-diff.html . Html files have a standard layout composed of tags , so let's follow that layout in our experiment script: <html> <head> </head> <body> <script> </script> </body> </html> The <head> section is by far the most important when using jsPsych. Here, we will place all the plugins we plan on using. If a plugin isn't listed in the <head> section, the part of your experiment that relies on that plugin will not work . Before we call any plugins, there are a few standard scripts which handle the formatting of experiments and come in the plugin library. Let's place those in our <head> section before we do anything else: <head> <script src=\"jspsych-6.1.0/css/jspsych.css\"></script> <script src=\"jspsych-6.1.0/jspsych.js\"></script> </head> For our task, we will be using the aptly named 'jspsych-same-different-html.js' plugin so let's put that in our <head> section now: <head> <script src=\"jspsych-6.1.0/css/jspsych.css\"></script> <script src=\"jspsych-6.1.0/jspsych.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-same-different-html.js\"></script> </head> As we go along, we may need to use more plugins. As long as we remember to place all the plugins in the appropriate section, there is no limit to the amount of plugins we can use. Note Always remember to keep your experiment files and the jsPsych library in the same directory . Coding our first experiment Now that we have successfully integrated the plugins into our experiment script, we're ready to start coding our experiment! All jsPsych experiment variables are pushed to a timeline, which we must initialize. Going forward, everything related to our experiment will be placed within the <body> and <script> tags. Let's create a timeline variable there now: <head> <link rel=\"stylesheet\" href=\"jspsych-6.1.0/css/jspsych.css\"></link> <script src=\"jspsych-6.1.0/jspsych.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\"></script> </head> <body> <script> var timeline = []; </script> </body> We have created a timeline variable that consists of an empty array. Every variable that we declare for our experiment will be pushed to this timeline variable, which is what the participant will see on their screen. Let's stop for a moment and remind ourselves about our experiment structure so that we know what to code next. Our task is a same-different task, which means that we can either show images or words. Let's assume we will be asking participants to judge whether the words presented are the same or different. Ideally, we would like our trial to have a trial duration parameter so that the words are presented in quick succession, one after the other. We can get a sense of each plugin's parameters by opening up the plugin script. Everything contained in var plugin = {} are the accepted parameters for the plugin that you can use in your experiment. Let's make one trial of our experiment now: <body> <script> var timeline = []; var trial_1 = { type: 'same-different-html', stimulus: ['<p>Walk</p>', '<p>Run</p>'], // an array of the words the participant will see prompt: \"<p>Press S if the words mean the same thing. Press D if they mean different things.</p>\", same_key: 'S', different_key: 'D', first_stim_duration: 1000, // time should always in miliseconds gap_duration: 500, second_stim_duration: 1000, answer: 'different' } timeline.push(trial_1) </script> </body> If we wanted to run this file locally right now, it wouldn't work. This is because jsPsych needs a few things each time you create an experiment with it. One of those things is the timeline variable, as mentioned, and another is the initialization object . Let's create that now: <body> <script> // timeline var timeline = []; // first trial var trial_1 = { type: 'same-different-html', stimulus: ['<p>Walk</p>', '<p>Run</p>'], // an array of the words the participant will see prompt: \"<p>Press S if the words mean the same thing. Press D if they mean different things.</p>\", same_key: 'S', different_key: 'D', first_stim_duration: 1000, // time should always in miliseconds gap_duration: 500, second_stim_duration: 1000, answer: 'different' } // pushing trial to timeline timeline.push(trial_1) // initialization object jsPsych.init({ timeline: timeline, on_finish: function() { jsPsych.data.get().localSave('csv', 'mydata.csv') } }) </script> </body> Looking good! You may have noticed that we have enabled data saving in the on_finish: parameter. jsPsych has a series of built-in functions that you can place after this parameter. For more information on that, check out the official documentation . The function we're using locally saves the participant response file as a CSV. You can name the CSV file anything you want. Rule of thumb! Errors occuring in your experiment script will appear in your browser console. It's a good idea to have that open and off to the side as you test your experiment. You can also test the output of certain lines of code or even preview the contents of arrays by calling console.log() in your script. It can be especially useful to place custom functions in the on_finish: parameter when you need to redirect participants back to the site where they came from (like a recruitment site, for instance) so that they can receive credit for doing your experiment. We will explore that in more depth in the Hosting & jsPsych tab. For now, if we want to add more trials, all we need to do is add another trial variable, define it using the same or different parameters (provided they are accepted by the plugin. Remember to check the plugin script for that kind of information), and push it to the timeline. We can also use other plugins to define other types of trials. Let's explore adding a welcome trial and a consent trial before the participant begins the experiment: <body> <script> var timeline = []; // welcome trial var welcome = { type: 'html-keyboard-response', stimulus: 'Welcome to the experiment! Press any key to begin.' // we can also use markdown language with this plugin choices: jsPsych.ALL_KEYS, // we are allowing any keyboard input } timeline.push(welcome) // consent function var ask_consent = function(elem) { if(document.getElementById('consent_checkbox').checked) { // check to make sure participant consented return true; // show next variable pushed to timeline } else { alert(\"Please consent before continuing.\"); // don't let participant proceed unless checkbox is checked return false; // obstruct next variable from timeline } } // consent trial var consent = { type: 'external-html', url: 'consent.html' // the name of your consent script cont_btn: 'Start', check_fn: ask_consent } timeline.push(consent) // TRIAL_1 FROM ABOVE GOES HERE // initialization object jsPsych.init({ timeline: timeline, on_finish: function() { jsPsych.data.get().localSave('csv', 'mydata.csv') } }) </script> </body> Remember Any new plugins that we introduce in our experiment must be listed in the head section. While the experiment we coded above is very basic, the foundation is the same for more complex experiments. That is to say, the experiment variables will always be passed to the timeline object. How we pass variables to the timeline object may vary (i.e. we can choose to push an experiment variable to the timeline object within the variable itself), but the underlying structure remains the same.","title":"Getting started"},{"location":"partone/#downloading-jspsych","text":"To download jsPsych, please click here . Please select the latest release to ensure you have access to the newest plugins.","title":"Downloading jsPsych"},{"location":"partone/#implementing-jspsych","text":"We can use jsPsych in two ways: either locally (i.e. on your own machine) or using a hosting website, such as Pavlovia or the new jsPsych-only Cognition.run. Whether we run jsPsych locally or host the experiment scripts somewhere, we will have to make changes to our script to ensure it all works.","title":"Implementing jsPsych"},{"location":"partone/#running-locally","text":"To run jsPsych locally, we need to place the plugin library in our project directory, where our experiment script will also be housed. Make a project directory called my-project on the desktop now. After you've made the folder, grab and drop the jsPsych plugin libary into the folder. Now we're ready to make our experiment script. Using your favourite text editor, create an empty .html file. Because we're going to be making a same-different task, let's call it same-diff.html . Html files have a standard layout composed of tags , so let's follow that layout in our experiment script: <html> <head> </head> <body> <script> </script> </body> </html> The <head> section is by far the most important when using jsPsych. Here, we will place all the plugins we plan on using. If a plugin isn't listed in the <head> section, the part of your experiment that relies on that plugin will not work . Before we call any plugins, there are a few standard scripts which handle the formatting of experiments and come in the plugin library. Let's place those in our <head> section before we do anything else: <head> <script src=\"jspsych-6.1.0/css/jspsych.css\"></script> <script src=\"jspsych-6.1.0/jspsych.js\"></script> </head> For our task, we will be using the aptly named 'jspsych-same-different-html.js' plugin so let's put that in our <head> section now: <head> <script src=\"jspsych-6.1.0/css/jspsych.css\"></script> <script src=\"jspsych-6.1.0/jspsych.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-same-different-html.js\"></script> </head> As we go along, we may need to use more plugins. As long as we remember to place all the plugins in the appropriate section, there is no limit to the amount of plugins we can use. Note Always remember to keep your experiment files and the jsPsych library in the same directory .","title":"Running locally"},{"location":"partone/#coding-our-first-experiment","text":"Now that we have successfully integrated the plugins into our experiment script, we're ready to start coding our experiment! All jsPsych experiment variables are pushed to a timeline, which we must initialize. Going forward, everything related to our experiment will be placed within the <body> and <script> tags. Let's create a timeline variable there now: <head> <link rel=\"stylesheet\" href=\"jspsych-6.1.0/css/jspsych.css\"></link> <script src=\"jspsych-6.1.0/jspsych.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\"></script> </head> <body> <script> var timeline = []; </script> </body> We have created a timeline variable that consists of an empty array. Every variable that we declare for our experiment will be pushed to this timeline variable, which is what the participant will see on their screen. Let's stop for a moment and remind ourselves about our experiment structure so that we know what to code next. Our task is a same-different task, which means that we can either show images or words. Let's assume we will be asking participants to judge whether the words presented are the same or different. Ideally, we would like our trial to have a trial duration parameter so that the words are presented in quick succession, one after the other. We can get a sense of each plugin's parameters by opening up the plugin script. Everything contained in var plugin = {} are the accepted parameters for the plugin that you can use in your experiment. Let's make one trial of our experiment now: <body> <script> var timeline = []; var trial_1 = { type: 'same-different-html', stimulus: ['<p>Walk</p>', '<p>Run</p>'], // an array of the words the participant will see prompt: \"<p>Press S if the words mean the same thing. Press D if they mean different things.</p>\", same_key: 'S', different_key: 'D', first_stim_duration: 1000, // time should always in miliseconds gap_duration: 500, second_stim_duration: 1000, answer: 'different' } timeline.push(trial_1) </script> </body> If we wanted to run this file locally right now, it wouldn't work. This is because jsPsych needs a few things each time you create an experiment with it. One of those things is the timeline variable, as mentioned, and another is the initialization object . Let's create that now: <body> <script> // timeline var timeline = []; // first trial var trial_1 = { type: 'same-different-html', stimulus: ['<p>Walk</p>', '<p>Run</p>'], // an array of the words the participant will see prompt: \"<p>Press S if the words mean the same thing. Press D if they mean different things.</p>\", same_key: 'S', different_key: 'D', first_stim_duration: 1000, // time should always in miliseconds gap_duration: 500, second_stim_duration: 1000, answer: 'different' } // pushing trial to timeline timeline.push(trial_1) // initialization object jsPsych.init({ timeline: timeline, on_finish: function() { jsPsych.data.get().localSave('csv', 'mydata.csv') } }) </script> </body> Looking good! You may have noticed that we have enabled data saving in the on_finish: parameter. jsPsych has a series of built-in functions that you can place after this parameter. For more information on that, check out the official documentation . The function we're using locally saves the participant response file as a CSV. You can name the CSV file anything you want. Rule of thumb! Errors occuring in your experiment script will appear in your browser console. It's a good idea to have that open and off to the side as you test your experiment. You can also test the output of certain lines of code or even preview the contents of arrays by calling console.log() in your script. It can be especially useful to place custom functions in the on_finish: parameter when you need to redirect participants back to the site where they came from (like a recruitment site, for instance) so that they can receive credit for doing your experiment. We will explore that in more depth in the Hosting & jsPsych tab. For now, if we want to add more trials, all we need to do is add another trial variable, define it using the same or different parameters (provided they are accepted by the plugin. Remember to check the plugin script for that kind of information), and push it to the timeline. We can also use other plugins to define other types of trials. Let's explore adding a welcome trial and a consent trial before the participant begins the experiment: <body> <script> var timeline = []; // welcome trial var welcome = { type: 'html-keyboard-response', stimulus: 'Welcome to the experiment! Press any key to begin.' // we can also use markdown language with this plugin choices: jsPsych.ALL_KEYS, // we are allowing any keyboard input } timeline.push(welcome) // consent function var ask_consent = function(elem) { if(document.getElementById('consent_checkbox').checked) { // check to make sure participant consented return true; // show next variable pushed to timeline } else { alert(\"Please consent before continuing.\"); // don't let participant proceed unless checkbox is checked return false; // obstruct next variable from timeline } } // consent trial var consent = { type: 'external-html', url: 'consent.html' // the name of your consent script cont_btn: 'Start', check_fn: ask_consent } timeline.push(consent) // TRIAL_1 FROM ABOVE GOES HERE // initialization object jsPsych.init({ timeline: timeline, on_finish: function() { jsPsych.data.get().localSave('csv', 'mydata.csv') } }) </script> </body> Remember Any new plugins that we introduce in our experiment must be listed in the head section. While the experiment we coded above is very basic, the foundation is the same for more complex experiments. That is to say, the experiment variables will always be passed to the timeline object. How we pass variables to the timeline object may vary (i.e. we can choose to push an experiment variable to the timeline object within the variable itself), but the underlying structure remains the same.","title":"Coding our first experiment"},{"location":"resources/","text":"HTML/Markdown tutorials w3schools.com - https://www.w3schools.com/html/ tutorialspoint.com - https://www.tutorialspoint.com/html/index.htm JavaScript tutorials Programming with Mosh - https://www.youtube.com/watch?v=W6NZfCO5SIk&t=1250s JavaScript.info - https://javascript.info/","title":"Resources"},{"location":"resources/#htmlmarkdown-tutorials","text":"w3schools.com - https://www.w3schools.com/html/ tutorialspoint.com - https://www.tutorialspoint.com/html/index.htm","title":"HTML/Markdown tutorials"},{"location":"resources/#javascript-tutorials","text":"Programming with Mosh - https://www.youtube.com/watch?v=W6NZfCO5SIk&t=1250s JavaScript.info - https://javascript.info/","title":"JavaScript tutorials"},{"location":"second/","text":"Using jsPsych's built-in functions Let's take a moment to explore how to code lengthy experiments more efficiently using jsPsych's own built-in functions. These functions, like jsPsych.timelineVariable(), allow us to nest timelines so that we don't have to redefine experiment variables we plan on re-using. We can use these functions in place of for loops to accomplish the same thing. More information on nested timelines can be found here . Suppose we have a series of images to display one after the other. The experiment structure is as follows: fixation point shown for 1000 miliseconds, image shown for 2000 miliseconds, a final image shown for 3000 miliseconds requiring a keyboard response from the participant. Let's see how we can do this using the function mentioned above and nesting our timeline: <body> <script> var timeline = []; // trial variables const letter_keys = ['1', '2', '3', '4', '5'] const trial_length_1 = 2000 const trial_length_2 = 3000 // this trial is outside of the nested timeline because we don't want to show it every time the timeline iterates var instructions = { type: 'html-keyboard-response', stimulus: '<p>Please rate each image you see on a scale of 1-5. To proceed, press any key on your keyboard.</p>', choices: jsPsych.ALL_KEYS //any keyboard input is allowed } var trial = { timeline: [ { type: 'html-keyboard-response', // it's best to use this plugin for fixation points because you can easily style it using HTML tags stimulus: '<p style=\"font-size: 300%\";>+</p>', choices: jsPsych.NO_KEYS, // we don't want a response from the participant so le'ts \"lock\" the keyboard trial_duration: 1000 }, { type: 'image-keyboard-response', stimulus: jsPsych.timelineVariable('stimulus'), choices: letter_keys, trial_duration: trial_length_1 prompt: '' // let's leave the prompt empty so that we don't see \"null\" above each image }, { type: 'image-keyboard-response', stimulus: jsPsych.timelineVariable('stimulus'), choices: letter_keys, trial_duration: trial_length_2, prompt: '' } ], timeline_variables: [ { stimulus: 'images/image_1.jpg' }, { stimulus: 'images/image_2.jpg' }, { stimulus: 'images/image_3.jpg' }, { stimulus: 'images/image_4.jpg' } // we can add as many images as we want ] } </script> </body> We can have another timeline variable next to stimulus called 'name' for example, which we can display with alongside our image. Nested timelines work best for simple trial iterations like the one we did above, they are not a substitute for more complex iterations and cannot be used for experiments that require more than three types of trials.","title":"2nd experiment"},{"location":"second/#using-jspsychs-built-in-functions","text":"Let's take a moment to explore how to code lengthy experiments more efficiently using jsPsych's own built-in functions. These functions, like jsPsych.timelineVariable(), allow us to nest timelines so that we don't have to redefine experiment variables we plan on re-using. We can use these functions in place of for loops to accomplish the same thing. More information on nested timelines can be found here . Suppose we have a series of images to display one after the other. The experiment structure is as follows: fixation point shown for 1000 miliseconds, image shown for 2000 miliseconds, a final image shown for 3000 miliseconds requiring a keyboard response from the participant. Let's see how we can do this using the function mentioned above and nesting our timeline: <body> <script> var timeline = []; // trial variables const letter_keys = ['1', '2', '3', '4', '5'] const trial_length_1 = 2000 const trial_length_2 = 3000 // this trial is outside of the nested timeline because we don't want to show it every time the timeline iterates var instructions = { type: 'html-keyboard-response', stimulus: '<p>Please rate each image you see on a scale of 1-5. To proceed, press any key on your keyboard.</p>', choices: jsPsych.ALL_KEYS //any keyboard input is allowed } var trial = { timeline: [ { type: 'html-keyboard-response', // it's best to use this plugin for fixation points because you can easily style it using HTML tags stimulus: '<p style=\"font-size: 300%\";>+</p>', choices: jsPsych.NO_KEYS, // we don't want a response from the participant so le'ts \"lock\" the keyboard trial_duration: 1000 }, { type: 'image-keyboard-response', stimulus: jsPsych.timelineVariable('stimulus'), choices: letter_keys, trial_duration: trial_length_1 prompt: '' // let's leave the prompt empty so that we don't see \"null\" above each image }, { type: 'image-keyboard-response', stimulus: jsPsych.timelineVariable('stimulus'), choices: letter_keys, trial_duration: trial_length_2, prompt: '' } ], timeline_variables: [ { stimulus: 'images/image_1.jpg' }, { stimulus: 'images/image_2.jpg' }, { stimulus: 'images/image_3.jpg' }, { stimulus: 'images/image_4.jpg' } // we can add as many images as we want ] } </script> </body> We can have another timeline variable next to stimulus called 'name' for example, which we can display with alongside our image. Nested timelines work best for simple trial iterations like the one we did above, they are not a substitute for more complex iterations and cannot be used for experiments that require more than three types of trials.","title":"Using jsPsych's built-in functions"},{"location":"third/","text":"Adapting a Psychopy experiment to jsPsych Let's attempt to adapt an existing Psychopy experiment to jsPsych. For this experiment, we will be showing participants the Ponzo illusion and asking them to judge the length of two bars. The participant will be given the choice of pressing 'f' if the image furthest from them appears smaller or, alternatively, 'k' if the image closest to them appears smaller. The duration of each image is 3000 miliseconds, after which point the trial continues, with or without a participant response. We will also include a break for participants after half of the images have been shown. If you'd like to try coding the experiment yourself, you will need to download the images, which you can do by cloning the tutorial Github repo here . All of the ways we have attempted to build an eperiment thus far -- a series of single trials pushed to a timeline or a nested timeline containing timeline variables -- can be used to build this experiment. However, an experiment script consisting of individual trials may not be the most efficient way to build this experiment, and nested are designed to be used when we want to loop through different types of trials. Here, what we really want to do is define one type of trial, using one plugin over and over, while our images are swapped out and randomized with each iteration. Let's explore how to do that and, in the process, introduce a different way to push variables to a timeline that may prove useful for more complex experiments down the road. We will be building this experiment using the new jsPsych hosting service Cognition.run, which doesn't require our experiment script to follow any standard format like we would have to when hosting on Pavlovia (see Hosting/Crediting for more information). As always, we will start by defining our timeline followed by our trial variables and finally our trials: var timeline = []; // let's define our trial variables let image_set_one = []; // first set of 5 images for(let i = 1; i <= 5; i++){ images.push('Ponzo_' + i + '.png') } let image_set_two = []; // second set of 5 images for(let i = 6; i <= 10; i++){ images.push('Ponzo_' + i + '.png') } // allowed keys const letter_keys = ['k', 'f']; //trial duration let trial_length = 3000 // our randomized image arrays var my_shuffled_images = jsPsych.randomization.repeat(image_set_one, 1); var my_second_shuffled_images = jsPsych.randomization.repeat(image_set_two, 1); //welcome trial var welcome = { type: 'html-keyboard-response', stimulus:'<p>Welcome to the experiment! You will be shown a series of images. If the image further away appears smaller, press <b>f</b>. If the image closest to you appears smaller, press <b>k</b>. Do not worry about making the \"right\" choice, you only have 3 seconds to respond to each image. Press any key on your keyboard to begin.</p>', choices: jsPsych.ALL_KEYS } timeline.push(welcome) //trial 1 for (let i = 0; i <= my_shuffled_images.length; i++) { let trial_1 = []; trial_1 = { type: 'image-keyboard-response', stimulus: my_shuffled_images[i], choices: letter_keys, trial_duration: trial_length } timeline.push(trial_1) feedback = { type: 'html-keyboard-response', stimulus: '<p>Please choose a key.</p>', choices: jsPsych.ALL_KEYS } if_node = { timeline: [feedback], conditional_function: function() { let choice = jsPsych.data.get().last(1).values()[0]; if(choice.key_press == null){ return true; } else { return false; } } } if (i === 4){ break; } timeline.push(if_node) } Let's stop for a second to talk about trial one. Here we have defined our first trial, containing our first randomized set of five images. We also want to provide some feedback (trial feedback) to the participant based on some condition, defined in the if_node. The if_node contains a conditional function parameter which, if true, pushes the feedback trial to the timeline and thus to the participant. If the condition evaluates to false, the feedback trial is skipped or hidden from the timeline and thus from the participant as well. Within the conditional function, we have pulled data from the last trial (trial_1) and stored it within the choice variable. We only care about the key press data from the last trial, so within our if statement we have defined the condition we care about (i.e. if no key press data is registered from the last trial, then do...) and defined the code that is to execute after the condition is true. Let's now define our break trial: // break trial var break_trial = { type: 'html-keyboard-response', stimulus: '<p>Great job! Feel free to take a quick break.</p>'+ '<p>Press g when you are ready to continue!</p>', choices: ['g'] } timeline.push(break_trial) // trial 2 is the same structure as above We're done! We have defined our experiment using a combination of both looped and non-looped single trials (i.e. break_trial and image trials). Now all that's left to do is to give the participant a brief message at the end to thank them for their participation and to include the initializaion object, without which our experiment will not work. It is at this point that we can also redirect participants to other sites using the on_finish: parameter. For more information on how to do that, please see Hosting/Crediting . Let's finish off our experiment now: // end trial var end_trial = { type: 'html-keyboard-response', stimulus: '<p>You have reached the end. Thanks for participating!</p>' } timeline.push(end_trial) jsPsych.init({ timeline: timeline }); Now all that's left to do is to test run our experiment now to make sure it functions as intended.","title":"3rd experiment"},{"location":"third/#adapting-a-psychopy-experiment-to-jspsych","text":"Let's attempt to adapt an existing Psychopy experiment to jsPsych. For this experiment, we will be showing participants the Ponzo illusion and asking them to judge the length of two bars. The participant will be given the choice of pressing 'f' if the image furthest from them appears smaller or, alternatively, 'k' if the image closest to them appears smaller. The duration of each image is 3000 miliseconds, after which point the trial continues, with or without a participant response. We will also include a break for participants after half of the images have been shown. If you'd like to try coding the experiment yourself, you will need to download the images, which you can do by cloning the tutorial Github repo here . All of the ways we have attempted to build an eperiment thus far -- a series of single trials pushed to a timeline or a nested timeline containing timeline variables -- can be used to build this experiment. However, an experiment script consisting of individual trials may not be the most efficient way to build this experiment, and nested are designed to be used when we want to loop through different types of trials. Here, what we really want to do is define one type of trial, using one plugin over and over, while our images are swapped out and randomized with each iteration. Let's explore how to do that and, in the process, introduce a different way to push variables to a timeline that may prove useful for more complex experiments down the road. We will be building this experiment using the new jsPsych hosting service Cognition.run, which doesn't require our experiment script to follow any standard format like we would have to when hosting on Pavlovia (see Hosting/Crediting for more information). As always, we will start by defining our timeline followed by our trial variables and finally our trials: var timeline = []; // let's define our trial variables let image_set_one = []; // first set of 5 images for(let i = 1; i <= 5; i++){ images.push('Ponzo_' + i + '.png') } let image_set_two = []; // second set of 5 images for(let i = 6; i <= 10; i++){ images.push('Ponzo_' + i + '.png') } // allowed keys const letter_keys = ['k', 'f']; //trial duration let trial_length = 3000 // our randomized image arrays var my_shuffled_images = jsPsych.randomization.repeat(image_set_one, 1); var my_second_shuffled_images = jsPsych.randomization.repeat(image_set_two, 1); //welcome trial var welcome = { type: 'html-keyboard-response', stimulus:'<p>Welcome to the experiment! You will be shown a series of images. If the image further away appears smaller, press <b>f</b>. If the image closest to you appears smaller, press <b>k</b>. Do not worry about making the \"right\" choice, you only have 3 seconds to respond to each image. Press any key on your keyboard to begin.</p>', choices: jsPsych.ALL_KEYS } timeline.push(welcome) //trial 1 for (let i = 0; i <= my_shuffled_images.length; i++) { let trial_1 = []; trial_1 = { type: 'image-keyboard-response', stimulus: my_shuffled_images[i], choices: letter_keys, trial_duration: trial_length } timeline.push(trial_1) feedback = { type: 'html-keyboard-response', stimulus: '<p>Please choose a key.</p>', choices: jsPsych.ALL_KEYS } if_node = { timeline: [feedback], conditional_function: function() { let choice = jsPsych.data.get().last(1).values()[0]; if(choice.key_press == null){ return true; } else { return false; } } } if (i === 4){ break; } timeline.push(if_node) } Let's stop for a second to talk about trial one. Here we have defined our first trial, containing our first randomized set of five images. We also want to provide some feedback (trial feedback) to the participant based on some condition, defined in the if_node. The if_node contains a conditional function parameter which, if true, pushes the feedback trial to the timeline and thus to the participant. If the condition evaluates to false, the feedback trial is skipped or hidden from the timeline and thus from the participant as well. Within the conditional function, we have pulled data from the last trial (trial_1) and stored it within the choice variable. We only care about the key press data from the last trial, so within our if statement we have defined the condition we care about (i.e. if no key press data is registered from the last trial, then do...) and defined the code that is to execute after the condition is true. Let's now define our break trial: // break trial var break_trial = { type: 'html-keyboard-response', stimulus: '<p>Great job! Feel free to take a quick break.</p>'+ '<p>Press g when you are ready to continue!</p>', choices: ['g'] } timeline.push(break_trial) // trial 2 is the same structure as above We're done! We have defined our experiment using a combination of both looped and non-looped single trials (i.e. break_trial and image trials). Now all that's left to do is to give the participant a brief message at the end to thank them for their participation and to include the initializaion object, without which our experiment will not work. It is at this point that we can also redirect participants to other sites using the on_finish: parameter. For more information on how to do that, please see Hosting/Crediting . Let's finish off our experiment now: // end trial var end_trial = { type: 'html-keyboard-response', stimulus: '<p>You have reached the end. Thanks for participating!</p>' } timeline.push(end_trial) jsPsych.init({ timeline: timeline }); Now all that's left to do is to test run our experiment now to make sure it functions as intended.","title":"Adapting a Psychopy experiment to jsPsych"}]}